/**
 * Open-source Game Boy inspired game. 
 * 
 * Created by tom_mai78101. Hobby game programming only.
 *
 * All rights copyrighted to The Pokémon Company and Nintendo. 
 */

Pokémon Walking - Documentation

Changelogs:
	r14: Updated Item data structure.
	r13: Added Characters/NPCs section. 
	r12: Added Triggers section and to clarify a bit more on how scripting is done.
	r11: Changing the Abstract a bit to reflect upon latest roadmap. Adding roadmaps.
	r10: Merged Signs with Obstacles. Removed stuffs.
	r09: Added File Formats, Control Schemes.
	r08: Added items.
	r07: Changing some of the info below.
	r06: Added more tiles.
	r05: Added a beginner's section, "How to Debug."
	r04: Added new tiles to the Tiles section.
	r03: Finished the draft.
	r02: Added the history.
	r01: First draft - using GameFaqs format.

-------------------------------

Table of Contents

To find the chapter you wanted to view, either scroll down
below, or use the Find (CTRL+F) method to search for the
tag the chapters are linked to.



Abstract...........................[PWD01]
RoadMap............................[PWD02]
About the Project..................[PWD03]
	History........................[PWD03#01]
How to Debug.......................[PWD04]
Metadata...........................[PWD05]
	PixelData......................[PWD05#01]
	Areas..........................[PWD05#02]
		Overworld..................[PWD05@02#01]
		Sector.....................[PWD05@02#02]
		User-Created Areas.........[PWD05@02#03]
	Tiles..........................[PWD05#03]
		Empty......................[PWD05@03#00]
		Path.......................[PWD05@03#01]
		Ledge......................[PWD05@03#02]
		Tree.......................[PWD05@03#03]
		Warp Point.................[PWD05@03#04]
		Area Connection Point......[PWD05@03#05]
		Stairs.....................[PWD05@03#06]
		Water......................[PWD05@03#07]
		House......................[PWD05@03#08]
		House Door.................[PWD05@03#09]
		Items......................[PWD05@03#10]
		Carpet (Indoors)...........[PWD05@03#11]
		Carpet (Outdoors)..........[PWD05@03#12]
		Triggers...................[PWD05@03#13]
		Characters/NPCs............[PWD05@03#14]
Entities...........................[PWD06]
	Player.........................[PWD06#01]
Controls...........................[PWD07]
	Walking Algorithm..............[PWD07#01]
File Format........................[PWD08]
	Legacy File Format.............[PWD08#01]
Triggers...........................[PWD09]
Dialogues..........................[PWD10]
Contributors.......................[PWD11]
Terms of License...................[PWD12]
Credits............................[PWD13]



-------------------------------

Abstract [PWD01]

Port of Pokémon walking movements from old-generation 
Pokémon games. It's not likely is going to be ported 
to this project, such as battling, and official 
Pokémon related activities the official released 
versions do provide us with.

-------------------------------

RoadMap [PWD02]

	This is the current revised roadmap, taking shape
	since the beginning of the project's initial 
	creation. It is written as notes on scrap paper.

	~~~NOTES~~~

	Rewrite Level Editor.
	I mean, really rewrite level editor. Risk must be taken. Waste lots of resources.
	Must relearn Swing and how to get things right.

	Needs to incorporate triggers, NPCs, and pixel data.
	
	Triggers are a necessity.
	NPCs are a necessity.

	In short, a rewrite.

	After rewrite, rewrite loading area maps.

	Finally, implement triggers and NPCs.

-------------------------------

About the Project [PWD03]

The project is a port of the walking algorithm used 
in 2nd generation Pokémon games. There are no future
plans to add the 1st generation walking algorithm into
this project.

All arts are entirely placeholder. Some of the artwork
may be here to stay.

-  -  -  -  -  -  -  -  -  -  -

	History [PWD03#01]

The concept was created out of spite. The developer,
tom_mai78101, felt that there was no easy way of
creating custom dialogues and characters to share to
others for jokes and fun. He does not want to learn
to hack Pokémon games just for such a simple task, 
but the developer could not put down the idea.

Frustrated, the developer created "Pokémon Dialogue
Editor," which is this project's first tentative
title.

Then, bored and lacking a plan, the developer moved on
to create "Pixavive Survival," a real-time 2D pixel
strategy game. 

Packed with new ideas and tricks, the developer went
back to this project and decided to redo the drawing
board, but came to a halt. Even with new ideas, the
developer could not come up with something original
that can be used in this project.

Looking back to the past, the developer decided to do
something more simple. Something that has to do with
Pokémon, and it has to be easy to see. It turns out to
be the game genre, role-playing game.

Rewriting the game engine, the developer created a
working application, where the player controls an
object using arrow keys as input. The developer wanted
to have a retro feel when the player is exploring what
was then an empty, blank canvas. The first thing that
sprung up was the walking algorithm Pokémon games used.

The developer first created tiles and placeholder art
used as obstacles. For the obstacles, the collision 
detection and response came from "Pixavive Survival."
Then comes the player, which was mostly copied from
Pokémon character sprite designs. It's really hard to
draw a human in a 16x16 square, especially when trying
to make human body parts apparent and easy to tell.

At first, the developer thought the Pokémon character
that was created is going to be a placeholder art until
the end of this project. Overtime, the developer started
to like the character design, and decided to keep it in,
and move on to working on the walking algorithm.

Once the developer implemented the walking algorithm,
it became apparent that the walking algorithm requires
tons and tons of tweaking and fixing bugs. This has led
to many full releases at an early stage of development.

It was also during that time, the new and second 
tentative title, "Pokémon Walking algorithm," stuck.

The history of the early development can be read here 
from the link given below, with each of the releases and
their respective source codes being available for
download:

http://www.thehelper.net/threads/java-pok%C3%A9mon-walking-algorithm.159287/

It was not until the developer sees having a GitHub repo
is crucial, that moving the entire project to an online
server becomes neccesary. At v5, the move was completed.

At v6, it was finally ready for public release to a more
larger group of people, namely game programmers.

It was not until v7 did all the known issues have been
fixed. Now, the developer is currently busy with the
military service, and will update the project from time
to time.

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

As of March 12, 2020, this project has gone through periods
of active and inactive development cycles. There is
continued motivation to improve the codebase, so that the
code is more readable and more flexible, such that adding
new features to the project wouldn't be such a mental
exercise

-------------------------------

How to Debug [PWD04]

This section explains steps to debugging this project and
provide educational instructions to help new developers 
get to know the flow of this project.

The developer assumes you have already installed Git of
your choice (TortoiseGIT, Git, GitHub for Windows, etc.),
and your preferred Java IDE. This project uses JRE7, so
it is possible this project will be in need of an overhaul
once Java 8 has been released.

If you wish, you may skip certain sections and paragraphs
below.

To start, open your preferred IDE. In this case, the
documentation will use Eclipse IDE Kepler for Java. Once
the IDE has finished loading, open up your workspace
directory in the file explorer of your operating system.

Once in the directory, use "git clone" to obtain a copy
of the repository. Once finished, in your IDE, import the
cloned directory as an existing project.

In Eclipse, there's a feature that allows you to stop at
main() when you start running your application. Your
preferred IDE may or may not include this feature, thus
you may wish to look it up online to understand this
feature.

Now, in Eclipse, up at the top of the taskbar, click on
the following:

Run > Debug Configurations...

You should be able to see your application name in the
Java Application category in the left pane. In the right
pane, you should be in the Main tab. Near the bottom of
the Main tab, you should see a checkbox with "Stop at
main" text next to it. Go ahead and tick the checkbox.

Now, press "Debug" button.

Once here, use F5 to step in, F6 to step over, F7 to 
step out, F8 to continue, CTRL+SHIFT+B to set a breakpoint,
and F11 to debug again without stopping at main.

Recommended suggestion would be to use F5 or F6 repeatedly
until you have reached the same method for the third time.

This is to ensure that you have at least an understanding
of behind the scenes, and knowing what does what. 

-------------------------------

Metadata [PWD05]

This section contains class objects that were deemed to
have multiple properties. They are grouped together for
easier maintaining and adding new features for future
planning.

Each section is separated into group labels, with their
usages and functions all explained. Refer to this
section when adding/modifying/removing functions and
their data format, since this section will be modified
accordingly.

All of these groups have not been finalized so far. Do
not assume their information to be permanent.

-  -  -  -  -  -  -  -  -  -  -

	PixelData [PWD05#01]
	
	Every areas are created using an image editor. Theoretically,
	the preferred editor should either be GIMP or Paint.NET 
	for their ability to draw transparent pixels, opacity, or 
	pixels with alpha values not set to 0xFF.
	
	They are then saved as PNG image files. PNG file format is
	preferred, for their transparency support.
	
	Once the areas are loaded into the game, the pixels in the
	image files are then converted into PixelData objects.
	
	A single PixelData object contains the pixel color data. It
	is split into 4 bytes, each representing the alpha value (A),
	the red value (R), the green value (G), and the blue value
	(B). Each of these bytes determine the many different
	properties of their corresponding tiles that are to be used
	in the game for both game data and rendering.
	
	All values used are in hexidecimal numbers.
	
	The data format is given below:	
	AA RR GG BB
	
	The following shows the minimum and maximum range:
	00 00 00 00
	FF FF FF FF
	
	The following algorithms are used to obtain each values from
	a given pixel:	
	A = (pixel >> 24) & 0xFF
	R = (pixel >> 16) & 0xFF
	G = (pixel >> 8) & 0xFF
	B = pixel & 0xFF
	
	The following list shows what each byte represents:
	A: Tile ID
	R: Extended Tile ID/Tile-specific data.
	G: Tile-specific data.
	B: Tile-specific data.
	
	Tile ID represents what the pixel data is in a given area.
	There are 256 different types of Tile ID in total. Two 
	Tile IDs must not interfere, or be related, with each other.
	
	Extended Tile ID can represent the specifications of a given
	Tile ID. It helps to categorize different, but related tiles
	together. There are 256 different extended Tile IDs in
	total, thus allowing 1 Tile of 1 kind of Tile ID to have 256
	related Tile IDs for the game to use. The theoretical
	maximum total of Tiles, when combining Tile IDs and extended
	Tile IDs, is 65536, or 256 x 256 different combinations.
	
	Tile-specific data are used by the game accordingly with the
	corresponding Tile ID. This is entirely determined by the
	Tile the game uses and the area the Tile is in.
	
-  -  -  -  -  -  -  -  -  -  -
	
	Areas [PWD05#02]
	
	Mentioned before, each area is created using an image
	editor that can edit/modify alpha values. Preferrably,
	GIMP or Paint.NET may be a good choice.
	
	Due to limitations set by PixelData, the maximum
	theoretical size of an area is 256x256. This is
	determined by using 2 bytes from a PixelData, each byte
	representing width and height respectively. This also
	means that the tile's position a PixelData represents
	in the game can span from (0, 0) to (255, 255) in a
	256x256 area.
	
	The chosen 2 bytes are, again, determined by the tile
	the Tile ID represents, and the area the tile is in.
	This goes with the "Tile-specific data" that is
	accordance with the PixelData data format.

	Character and Area have a 16:1 ratio when converting
	Character positions to Area positions.

	Area Position = Character Position * Character Tile size

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Overworld [PWD05@02#01]
	
		In order to create a convincing overworld environment, the
		areas must be large and explorable. Near the borders of the
		areas, there must be a thickness of at least 5 tiles to the
		right, and 4 tiles to the left. To make it consistent, the
		overworld can have 5 tiles surounding the parameter.
		
		The overworld consists of large areas, easily consisting of
		many paths, varying terrain, and cities/towns. It is up to
		the map maker to decide on the content of the areas.
		
		No two areas should overlap, even if it's one single tile
		being overlapped. This is due to game design limitations, 
		which cannot be	easily changed.
		
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Sector [PWD05@02#02]
		
		Each area consists of sectors, which tells the game to mark
		a section of an area a specific area of interest. This area
		of interest will be marked on a map of the overworld for
		players to see and view where they are going.
		
		Each sector has a name. The name can be anything of interest
		or depends on the size of the area of interest.
		
		When crossing a sector, the game updates the current
		whereabouts to the player. In order to update the game, the
		mark has to be set in the path of where the player must cross
		in order to enter a new area of interest.

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		User-Created Areas [PWD05@02#03]

		This section deals with user-created area map files that are
		created using the provided level editor in addition to the
		game package.

		The level editor only allows editing one area map per session,
		meaning that if the user intends to create an overworld with
		multiple user-created areas, then the user must create and
		open new sessions of the level editor for each user-created
		area.

		If time allows, this may be improved.

		In order to determine the chronological order of the
		user-created area defined by the user themselves, the level
		editor should be able to provide:

		- A way to set the area ID value.
			- A way to verify if the area ID value is unique.
			- Easy and obvious way to let users know how the area ID
			  value is determined.
		- A way to set the chronological order sequence of the area.
		- A way to store multiple user-created custom trigger scripts
		  in the user-created area.
		
		There should be no distinction between an official area map
		and an user-created area map. This distinction should only be
		done by putting the area map file in the game/mod/ folder
		directory or in the common/src/main/resources/art/area folder
		directory.

		The area map file format uses a standard Portable Network
		Graphics with DEFLATE compression algorithm applied. Typical
		area map files should display transparent images, and this
		is intentionally done so that when players are looking around
		in the game's file structure, they do not get spoiled by the
		creator's area map layout.
	
-  -  -  -  -  -  -  -  -  -  -

	Tiles [PWD05#03]
	
	This section contains information of all available tiles used
	in the game. You may need to look up related tiles in order to
	find the tile you really wanted.
	
	Each tile consists of the following:
                                
        Tile ID:                The ID number and name of the tile.
        Extended Tile ID:       The ID number used in conjunction of the
                                Tile ID.
        Tile Specific ID:       The ID number defined in relation to the
                                tile and that tile only.
        Full Data(s):           The full data value, listed in the order
                                of ARGB format. There can be more than
                                one specific full data, if there are a
                                certain number of different full datas,
                                it will all be listed. If there are
                                unknown number of different full datas,
                                it will be listed with variables in them.
        Description:            Describes the properties of the tile, and
                                how to use them accordingly.
                                
	The maximum amount of tiles available in the game is 256. With
	extended tile IDs included, the maximum amount of tiles is
	65536.
	
	If there exists a situation where a single tile cannot be represented
	enough, then it will either be delegated into two or more different
	tiles, or there will probably be a format update, which may break
	backwards compatibility, and stop using an universal standard file 
	format.
	
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 

		Empty [PWD05@03#00]
		
		Tile ID:
			A: 00 - Empty
		Extended Tile ID:
			R: 00
		Tile Specific ID:
			G: 00	
			B: 00
		Full Data:
			00 00 00 00
		Description:
			Represents an empty, non-existing tile. Reserved for
			both the game and the editor for its special uses.
			
			In the editor, this represents an "Eraser" tile, used
			to clean the map tiles and reset their values back to
			zero.
			
			In the game, this represents an "Error" tile, shown
			as a "NO PNG" bitmap tile. When this tile shows up
			in the game, it is definitely either human error when
			creating a custom map, or there exists a bug that 
			may generate from loading other pixel data.
	
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 
	
		Floor [PWD05@03#01]
		
		Tile ID:
			A: 01 - Floor
		Extended Tile ID:
			R: 00 - Grass. (Path)
			R: 01 - Mountain Ground. (Path)
			R: 02 - Path. (Path)
			R: 03 - Hardwood (Indoors)
			R: 04 - Right Tatami Floor (Indoors)
			R: 05 - Left Tatami Floor (Indoors)
		Tile Specific ID:
			G: TT - Area Type.
			B: HH - Ground Height.
		Full Data(s):
			01 00 TT HH
			01 01 TT HH
			01 02 TT HH
		Description:
			Walkable path tiles, may also represents unpaved roads or 
			fields.
			
			Extended Tile ID is used to determine path biome type. Area
			Type is used to determine path biome color.
			
			Area Type determines the data type of path, which is used
			for other metadata uses. The full list of area types are
			given below:
			
				Area Type:
					
					0x00 = Forest
					0x01 = City
					0x02 = Mountain 
					0x03 = Water
					0x04 = Cavern
					0x05 = Building
			
			More area types may be specified at a later time, or when it is
			required to add a new area type. All future area types are to 
			refer back to this list.
			
			Ground height specifies the light level drawn onto the
			screen.
			
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Ledge [PWD05@03#02]
		
		Tile ID:
			A: 02 - Ledge
		Extended Tile ID:
			R: 00 - Bottom facing ledge
			R: 01 - Bottom left corner ledge
			R: 02 - Left facing ledge
			R: 03 - Top left corner ledge
			R: 04 - Top facing ledge
			R: 05 - Top right corner ledge
			R: 06 - Right facing ledge
			R: 07 - Bottom right corner ledge
			
			R: 08 - Bottom facing double ledge
			R: 09 - Bottom left corner double ledge
			R: 0A - Left facing double ledge
			R: 0B - Top left corner double ledge
			R: 0C - Top facing double ledge
			R: 0D - Top right corner double ledge
			R: 0E - Right facing double ledge
			R: 0F - Bottom right corner double ledge
			
			R: 10 - Bottom facing inner ledge
			R: 11 - Bottom left inner ledge
			R: 12 - Left facing inner ledge
			R: 13 - Top left inner ledge
			R: 14 - Top facing inner ledge
			R: 15 - Top right inner ledge
			R: 16 - Right facing inner ledge
			R: 17 - Bottom right inner ledge
		Tile Specific ID:
			G: TT - Area Type ID (Temporary)
			B: 00 - Ledge Type ID (Temporary)
		Full Data(s):
			02 RR TT 00
		Description:		
			Can be jumped across according to its height, which is determined
			by direction from where the player starts jumping. Horizontal
			ledge heights are determined by thickness of the ledge. If it's
			thick, it means top is higher than bottom. If it's thin, it means
			bottom is higher than top. Player can only jump from higher
			ground to lower ground.
			
			Area Type ID determines the base color of the biome the tile is
			currently in.
			
			RR stands for one of the 8 cardinal directions the ledges are
			facing (N, S, E, W, NE, NW, SE, and SW).
			
			Ledge Type is used to categorize all kinds of ledges. There may be
			natural ledges, ramps for puzzles and traps, bicycle poles to hop
			around, etc. This may be temporary.
			
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Obstacles [PWD05@03#03]
	
		Tile ID:
			A: 03 - Obstacles
		Extended Tile ID:
			R: 00 - Small Tree
			R: 01 - Pile of Wooden Logs
			R: 02 - Planks
			R: 03 - Scaffolding (Left)
			R: 04 - Scaffolding (Right)
			R: 05 - Sign
			R: 06 - Workbench (Left)
			R: 07 - Workbench (Right)
			R: 08 - Dead Small Tree
		Tile Specific ID:
			G: GG (Sign) Dialogue ID.
			B: BB (Sign) Dialogue ID.
			Anything else:
				Undefined.
		Full Data(s):
			03 RR GG BB
		Description:
			An obstacle that blocks the Player's path. Currently, has no purposes
			in the game.
			
			Sign:
				Sign post. Players can interact with sign posts by pressing the action
				key, "Z" or "/". This will show up a dialogue of the text written on
				the sign.
				
				WARNING: Dialogue ID must not equal to 0, or 0x0000. This is reserved.
			
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Warp Point [PWD05@03#04]
		
		Tile ID:
			A: 04 - Warp Point
		Extended Tile ID:
			R: XX - Target Area
		Tile Specific ID:
			G: WW - Player's X position in the target area
			B: HH - Player's Y position in the target area
		Full Data(s):
			04 XX WW HH
		Description:
			When stepped on, it warps the player to the target area. The RGB
			values are arbitrary, meaning that there is no defined constant for
			different target areas and different player target X and Y
			coordinates. The maximum amount of warp points for a single area is
			256. The range of where the player is to spawn in the area is 0 ~ 255.
			
			Due to limitations of game data format, all warp points of different
			bitmaps will have its own data tile ID.
			
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Area Sector Point (ASP) [PWD05@03#05]
		
		Tile ID:
			A: 05 - Area Sector Point (ASP)
		Extended Tile ID:
			R: TT - Target Area ID
		Tile Specific ID:
			G: SS - Sector ID in Target Area
			B: AA - Area Type ID
				00 = Forest (Green Forest Entrance) 
				01 = City (Path [Road])
				02 = Mountain (Path [Dirt])
				03 = Water (Water [No Borders])
				04 = Cavern (Path [Dirt])
				05 = Building (Door / Carpet)
		Full Data(s):
			05 TT SS 00
		Description:
			When stepped on, it tells the game the player has moved into a new
			area. This new area is a separate image file loaded and initialized
			from the very beginning. 
			
			The target area ID is obtained from the
			pixel data and handled by the game in order to load the correct
			area from a list of all areas pre-loaded.
			
			The sector ID is used to tell the game what the new sector the player
			is in when entering a new area. This is required in order to identify
			the current sector.
			
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Stairs [PWD05@03#06]
		
		Tile ID:
			A: 06 - Stairs
		Extended ID:
			R: 00 - Single-story Bottom
			R: 01 - Single-story Left
			R: 02 - Single-story Top
			R: 03 - Single-story Right
			R: 04 - Double-story bottom
			R: 05 - Double-story left
			R: 06 - Double-story top
			R: 07 - Double-story right
		Tile Specific ID:
			G: 00 - Area Type ID (Temporary)
			B: 00 - None specified.
		Full Data(s):
			06 00 00 00
			06 01 00 00
			06 02 00 00
			06 03 00 00
		Description:
			Lets the player move to a higher area in a small amount of time.
			
			Area Type ID determines the base color of the biome the tile is
			currently in.

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Water [PWD05@03#07]
		
		Tile ID:
			A: 07 - Water
		Extended Tile ID:
			R: 00 - No Border
			R: 01 - Left Border
			R: 02 - Top Left Border
			R: 03 - Top Border
			R: 04 - Top Right Border
			R: 05 - Right Border
		Tile Specific ID:
			G: 00 - Area Type ID.
			B: 00 - None specified.
		Full Data(s):
			07 00 00 00
			07 01 00 00
			07 02 00 00
			07 03 00 00
			07 04 00 00
		Description:
			Represents water.
			
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		House [PWD05@03#08]
		
		Tile ID:
			A: 08 - House
		Extended Tile ID:
			R: HH - House-related Tiles:
				00 - Bottom
				01 - Bottom Left
				02 - Bottom Right
				03 - Center Wall
				04 - Center Window Wall
				05 - Center Left Windows
				06 - Center Right Windows
				07 - Left Wall
				08 - Left Window Wall
				09 - Right Wall
				0A - Right Window Wall
				0B - Single Roof Left
				0C - Single Roof Middle
				0D - Single Roof Right
		Tile Specific ID:
			G: 00 - Area/Sector ID.
			B: 00 - None specified.
		Full Data(s):
			08 HH 00 00
		Description:
			Represents buildings in the game. A single tile only represents a 
			portion of the building.
			
			Roofs are colored in gray, which is used for manipulating colors in the
			game. Colors are to be determined by the game, not by the map makers.
			The roof colors are determined by the area/sector ID.
			
			Doors are not related to Houses, even though they are entrances to
			houses. This is due to limitations of the game data format.
		
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		House Door [PWD05@03#09]
		
		Tile ID:
			A: 09 - Door
		Extended Tile ID:
			R: TT - Target Area
		Tile Specific ID:
			G: XX - X position of Target Area
			B: YY - Y position of Target Area
		Full Data(s):
			0A TT XX YY
		Description:
			Another type of warp point. For more information, see Warp Points. 
			[PWD05#03@04].	
			
			Door warp points will tell the game that the player is indoors, and
			is no longer outside in the overworld.

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Items [PWD05@03#10]
		
		Tile ID:
			A: 0A - Items
		Extended Tile ID:
			R: XX - Item Unique ID.
		Tile Specific ID:
			G: OO - Object Types.
			B: BB - Reserved miscellaneous data.
		Full Data(s):
			0B XX OO BB
		Description:
			An object that can be picked up and be used by the player. The object
			itself can block a player's path, therefore, it can also act as an 
			obstacle.
			
			Object Type determines whether or not the items can be picked up or 
			can be moved around. By default, Values 00 is for items only. 
			Anything else would be object types that would be moved around.
			
			There is a hard limitation of 256 unique items in the game. 
			
			Certain items, such as key items, 1-time-use-only items, and really
			rare items, can use the reserved miscellaneous bytes to add additional
			information.
			
		Note:
			The max total of unique item IDs of 256 may change, depending on where
			the game will go towards. It is also likely we can split the Blue byte
			into 2 nibbles (4 bits each), so that the bits group, "RRB" can have
			4,096 unique items in total, and the final nibble bits group "B" will 
			be reserved to store additional information.
		
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Carpet (Indoors) [PWD05@03#11]

		Tile ID:
			A: 0B - Carpet (Indoors)
		Extended Tile ID:
			R: AA - Target Area ID.
		Tile Specific ID:
			G: XX - Target X position.
			B: YY - Target Y position.
		Full Data(s):
			0C AA XX YY
		Description:

		Acts similar to Warp Points, the only difference is that when the player 
		is stepping on the carpet, an exit arrow will be displayed, telling the
		player where the exit is, and where the player should go in order to exit.

		Upon exiting, the player will walk out the exit.

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Carpet (Outdoors) [PWD05@03#12]

		Tile ID:
			A: 0C - Carpet (Outdoors)
		Extended Tile ID:
			R: AA - Target Area ID.
		Tile Specific ID:
			G: XX - Target X position.
			B: YY - Target Y position.
		Full Data(s):
			0D AA XX YY
		Description:

		Acts similar to Warp Points, the only difference is that when the player 
		is stepping on the carpet, an entrance arrow will be displayed, telling the
		player where the entrance is, and where the player should go in order to 
		enter.

		Upon entering, the player will walk into the entrance before warping, and 
		then stand still at the extrance.

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

		Triggers [PWD05@03#13]
		
		Tile ID:
			A: 0D - Triggers
		Extended Tile ID:
			R: 00 - Default Starting Point
			R: XX - Any triggers or any one of all available bitmaps
		Tile Specific ID:
			G: GG - Script ID
			B: BB - Script ID
		Full Data:
			0D XX GG BB
		Description:
			(This should be used sparsingly. Useful for debugging maps.)
			
			Default Starting Point			

				This sets the default starting position for the player. If it so happens
				that the game loads the map in such a way causing the player to be stuck,
				then it means there is a problem with the game, the editor, or the map.

			All other triggers depend on the Extended Tile ID.

				Depending on how it was triggered, this tile will trigger a scripted
				event matching the script ID.

				The bitmap value determines what tile bitmap this trigger will use
				when it is displayed on the screen. Depending on the bitmap tile
				value, it can either be stepped on, or is blocking the player.

				If the player steps on this tile, or if the player interacts with this
				tile, it will start triggering.

			How it works:

				You have a trigger script writen in either the default data file 
				"art/script/scripts.txt", or by adding to "mod/script/scripts.txt".
				In this file, it only contains information about the trigger script
				data, but it should not contain any information about what location
				the trigger script should execute in the Area map.

				The Area map is what decides on which trigger script to execute,
				based on where the triggering pixel data is located in the Area map.

				The triggering pixel data, called TriggerData, stores these data:
				- The X position.
				- The Y position.
				- The Trigger ID

				When the player or NPC lands on the X and Y position, the trigger
				will activate and execute the trigger script associated with the
				Trigger ID value, however many times the player or NPC lands on
				the tile.

				It is up to the trigger script data that controls whether it
				should execute this many times, handle dialogues, or trigger
				scripted cinematic movements, called MovementData.
			
-------------------------------

		Characters/NPCs [PWD05@03#14]
		
		Tile ID:
			A: 0E - Characters category
		Extended Tile ID:
			R: XX - Character Unique ID
		Tile Specific ID:
			G: GG - Script ID
			B: BB - Reserved miscellaneous data 
		Full Data:
			0E XX GG BB
		Description:
			Characters/NPCs will be part of this group.
			
			Since some Characters/NPCs will not have fixed positions and fixed
			directional facings, it make sense to assign character unique IDs within
			the game to differentiate each character. The game should be able to
			handle and trigger the characters/NPCs the player will interact with,
			based only on the character's unique ID value.
			
			A hard limitation is, there is a max total of 256 unique characters/NPCs
			in the game. You cannot exceed this number. It is allowed to re-use
			characters/NPCs in some game scenarios.
			
			Script IDs are assigned to characters/NPCs. They can be assigned to common
			scripts that all characters/NPCs can use or trigger, or they can have their
			own, unique scripts be assigned. 
			
			Reserved data can be used in many ways, such as keeping track of game
			progression, the number of times the character/NPC has been interacted with,
			scripts related data storage, and many more. Not all characters/NPCs will
			use this data.
			
		Notes:
			* Map placements to be determined on a map.
			* AI controlled movements can be by game or by scripts.
			* Need to have its own animation.
			
-------------------------------

	Entities [PWD06]
	
	Entities are animated beings in the game, and they
	represent how life-like the game is going to look
	when the players play the game.
	
	In order to make entites be animated, it must
	conform to a specific set of rules to follow. These
	rules, when set in place, will allow the entities
	to move freely and possibly provide interactions
	and feedback based on movements to the players.
	
	The set of rules are created using a scripting
	language syntax, read from a file. Not only this
	provides easier modifications, but also allow the
	possibility to extend implementations for future
	versions.
	
	The set of rules are given in the following list:
	
	Directions:
	1.		U: Up. Makes the entity face up.
	2.		D: Down. Makes the entity face down.
	3.		L: Left. Same as above for left.
	4.		R: Right. Same as above for right.
	
	Syntax:	<Direction> + #: How many steps the entity
				should take. The number must be positive
				and unsigned, ranging from 0 to 9.
				0 represents turning around. Anything
				above 0 represents steps the entity
				should take until it is out of the screen.
	Syntax: <Direction> + # + <Same Direction> + # + ...:
				The entity will continue to walk in the
				given direction until otherwise. This is
				used mostly in cinematics where the
				entity leads the players to some place far
				from where the players are standing before
				the interaction.
				
	Dialogues:
	5.		@: Dialogue. Makes tne entity interact with
				another entity.

	Syntax:		@ + #: What dialogue should the entity use to
				interact. The number indicates the
				dialogue ID number, specifying what dialogue
				to use.
			@ + # + & + # + & + ...: What multiple dialogues
				should the entity use to interact. The 
				ampersand ('&') represents concatenation of
				multiple dialogues, interacted in a way that
				makes the entity tell something that one or
				two dialogues aren't enough to finish.
			@ + # + ?: What dialogue the entity should ask.
				The number specifies the dialogue. The
				question mark represents the dialogue type
				is a question, and the answers are either
				'Yes' or 'No'.
			@ + # + ? + [...]: What dialogue the entity should
				ask. Similar to above, but this provides
				multiple, custom answers. To be implemented.
			@ + # + !: What dialogue is used for the entity to
				alert about. Usually used for specific story
				plot events, or other player actions only.
				The exclamation mark represents the dialogue
				type is an alert, therefore the text being
				displayed should be slow and meaningful, mostly
				never more than 2 lines.
	
	Note that all of the syntaxes may be changed in
	the future.
	
	6.		$ + #: Script header. Tells the game that this is
				the	start of the script. The number indicates
				the script ID. This allows multiple entities
				to use the same script multiple times.
	7.		%: Script delimiter. The script has ended.
	8.		/: Comments.
	9.		^: Movement header. Tells the game that this is
				the start of movement scripts. One entire
				line of infinite movements counts as one 
				movement script. Adding a newline ends the 
				movement script.
	
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
		
	Player [PWD06#01]

	Currently, the Player is represented as "Generic 
	Male," a character that is based off of the design
	of the main protagonist in the 2nd generation 
	Pokémon games, Gold, Silver, and Crystal versions.
	
	The character design and artwork were done by hand,
	and they are merely placeholder art.
	
	The player can access their Inventory via the start
	menu by pressing START key.

	Player positions are Area Player positions, 
	multiplied by the Player Tile's Width and Height.
	There is a unit of measurement conversion between
	Area and objects extended from the "Character" class
	object.

-------------------------------

Controls [PWD07]

To move the player around, use either WASD keys or 
the arrow keys. Tap any key to let the Player face 
towards the direction the tapped key represents.

All of the inputs handled by the game are defined in
the InputHandler class object. They are defined below:

UP              W               Moves the player upwards.
DOWN            S               Moves the player downwards.
LEFT            A               Moves the player to the left.
RIGHT           D               Moves the player to the right.
ENTER                           START BUTTON
Z               /               The Action Button. (GameBoy equivalent of the A button.)
X               .               The Cancel Button. (GameBoy equivalent of the B button.)

-  -  -  -  -  -  -  -  -  -  -

	Walking Algorithm [PWD07#01]
	
	<To be continued...>

-------------------------------

File Format [PWD08]

The current file format used is version 0002.

The data file format is used to structure saved
data that the game is able to read/write/modify
easily. 

It is decided that the file format is to use a
tree structure hierarchy for storing relevant
data bits as the game progresses. The file 
format will expand further as the game includes
more features that require persistent data.

The new file format is based off of packet
wrappers, which encapsulates data with the
following information for each encapsulated
wrapper

[short SIZE][4 bytes PACKET_NAME][N bytes DATA]

Where, for each tag:

- SIZE: Refers to the total size of the packet, 
minus the 2 bytes used to store the data size.
In other words, it's the length of the packet.
- PACKET_NAME: Refers to the 4-bytes long storing
text data of the name of the packet.
- DATA: Refers to the packet data. It can be N
bytes long, where N is a positive non-zero number.

These packets are called "Data Chunks" or "Chunks"
in the source code. The file format system was
updated to be able to easily add new information
and packet data when necessary.

We can extend a plain old Java object, or called
"POJO", from the base class called "Chunk". This
handles reading, writing, and fetching the chunk
size. These operations must be overridden in the
newly extended POJOs.

-  -  -  -  -  -  -  -  -  -  -

	Legacy File Format [PWD08#01]

	This is the old file format, used in version 0001.

	Most of the information is similar to the current
	file format version, mentioned above.

	The order of the file format tree hierarchy is
	determined by the last date of creation. Anything
	newer is inserted from the bottom of the main tree
	hierarchy, with nodes extending from the root to
	define the data for the game to use. This allows
	categorization, which can be used with the level
	editor for easier modification and possibly enable
	modding potential for the future community.

	Below is a diagram that shows how the tree structure
	is built. Note that for some text readers, they may
	use a non-monospaced font. To view correctly, please
	use a monospaced font. The encoding used is UTF-8.

	File Format
	|
	├ Header Information ┬ Identification Code (int)
	|                    ├ Header Code (int)
	|                    └ Format Suffix (int)
	├ Player Information ┬ Player Name (2 longs, 16 bytes)
	|                    ├ Player Gender (1 byte)
	|                    ├ Inventory ─────────────┬ Potions ───────────┐
	|                    |                        ├ Key Items ─────────┼──────────── Items ───┬ Item Name
	|                    |                        ├ Pokéballs ─────────┤                      └ Item Quantity
	|                    |                        └ TMs/HMs ───────────┘
	|                    ├ Positional Data ───────┬ Current Area ─────┬ Area ID
	|                    |                        |                   └ Area Region
	|                    |                        ├ Current OverWorld
	|                    |                        ├ X Location
	|                    |                        └ Y Location
	|                    └ Player State
	├ Date of Saved Data ┬ Last Saved Time
	|                    ├ Day/Night State
	|                    └ Elapsed Time
	├ Using Custom Maps ─┬ Custom Area File Name
	|                    ├ Custom Area ID
	|                    └ Custom Area Region
	└ (Future TODO)

	Each node contains 2 bytes used for identifying the 
	nodes when the file format is being read. And another
	2 bytes containing the size of the chunk of the nodes.

	In each chunk, the data is read into groups, where
	the game will separate data it wants, and set the
	variables accordingly.

-------------------------------

Triggers [PWD09]

This section contains the same readme content 
generated by Java code, but it is more up-to-date than
the generated version. This can also be found in the
"mod" folder that goes along with the game.

To start, the user puts their scripts in this folder,
and start the game. This will allow the game to load 
their custom scripts into the game. But, the game will
then no longer load the default scripts, unless all of
the custom scripts have been removed, or the game has 
been placed in a separate folder.

All custom scripts must follow the layout set forth by
the documentation (here). It is strictly adhered to 
the game codes, which makes it more difficult to 
modify and edit if the core (and essential) trigger
mechanisms are modified and edited. (This can be seen
as a drawback for unmodifiable scripting, but I also
don't want to add too much complexity to this that
makes it look like it's a Lua-supported software.)

 ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

Automation Script Format:

Entities that can walk, or run, must be required to 
have movements for the gameto feel lively.

More commands to come. There will be more 
clarifications on what commands does what, and what 
commands need to go with what other commands in the 
future, once the triggering sections are fully 
outlined and organized.

_: Whitespaces.
@: Trigger name.
^: [Direction, Steps]. Can be chained for delaying scripted movements.
$: Start of script. Appears at beginning of script. Uses numeric ID values as Trigger IDs
%: Script delimiter. Always appear at end of script.
#: Speech Dialogue.
/: Comments. Whole line gets ignored, even if it's somewhere in the middle of the line.
?: Question Dialogue. It must be immediately followed by both + and -. This will change.
+: Affirmative dialogue.
-: Negative dialogue.
[: Affirmative Action.
]: Negative Action.
;: Repeat Flag. If contains ';', it means it's enabled by default.
|: Limited Repetition. Default is set to unlimited repetition. Adding a number at the end represents the number of times it can be triggered before it turns itself off. This is planned to be added after the start of the script. This can be optionally added or ignored.

Example:

$0 ;
@Eraser
%

$1 |4
@Hello_Test_Trigger
#Hello_World!
%

-------------------------------

Dialogues [PWD10]

Dialogues are text speech bubbles in the game. Any text displayed inside a white
rectangle box with a border around it is considered to be a dialogue. Even a
simple YES/NO text bubble is considered as a dialogue.

There are 2 types of dialogues, a full-width dialogue and a half-width dialogue.
The full-width dialogue is the default dialogue normally used when a player is
interacting with an entity. The half-width dialogue is used when the player
is in the Start Menu, and when the player is reading the item descriptions.

The game renders the dialogue by rendering each character per 8 in-game ticks.

The max size of the full-width dialogue text row is 18 characters long. The max
size of the half-width dialogue text row is 9 characters long. For both types of
dialogues, there are 2 rows in total that can be shown on the screen. 

For any dialogue text that exceeds the max size, there will be a dialogue scroll
arrow telling the player to continue the dialogue interaction. Once the player
engages in the dialogue interaction to scroll the text, the 2 rows of the dialogue
text is scrolled up, then the dialogue text continues until the end of the
dialogue has been reached.

Whenever a dialogue text contains 2 whitespaces, it is considered to be a "line
break". When displaying a dialogue notifying the player an item has been picked
up, the line breaks are added after the item's name.

-------------------------------

Contributors [PWD11]

Developer - tom_mai78101

-------------------------------

Terms of License [PWD12]

This entire project is Apache Licensed. For more
information, please read the terms and regulations
of the license file in the root of the project folder.

-------------------------------

Credits [PWD13]

Author - tom_mai78101
